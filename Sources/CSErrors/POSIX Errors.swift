//
//  POSIX Errors.swift
//  
//
//  Created by Charles Srstka on 1/10/23.
//

import System

#if canImport(Darwin)
import Darwin
func getErrno() -> Int32 { Darwin.errno }
#elseif canImport(Glibc)
import Glibc
func getErrno() -> Int32 { Glibc.errno }
#endif

#if Foundation
#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
#endif

internal var posixErrorDomain: String { "NSPOSIXErrorDomain" }

extension Error {
    public func toErrno() -> Int32? {
        if #available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *), versionCheck(11),
           let err = self as? System.Errno {
            return err.rawValue
        }

        if let osStatusErr = self as? OSStatusError, let err = translateOSStatusToPOSIX(osStatusErr.rawValue) {
            return err
        }

        switch self._domain {
        case posixErrorDomain:
            return Int32(self._code)
        case OSStatusError.osStatusErrorDomain:
            return translateOSStatusToPOSIX(OSStatus(self._code))
        default: break
        }

        return nil
    }
}

#if Foundation

public func errno(_ code: Int32 = Foundation.errno, url: URL?, isWrite: Bool = false) -> any Error {
    if code == 0 {
        return CocoaError(isWrite ? .fileWriteUnknown : .fileReadUnknown)
    }

    let cocoaCode = cocoaCode(posixCode: code, isWrite: isWrite)
    let err: any Error

    if #available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *), versionCheck(11) {
        err = System.Errno(rawValue: code)
    } else if let posixCode = POSIXErrorCode(rawValue: code) {
        err = POSIXError(posixCode)
    } else {
        err = NSError(domain: NSPOSIXErrorDomain, code: Int(code))
    }

    if err.isCancelledError {
        return CocoaError(.userCancelled, url: url, underlying: err)
    }

    if let cocoaCode {
        return CocoaError(cocoaCode, url: url, underlying: err)
    }

    return err
}

#endif

/// Create an `Error` corresponding to a POSIX error code.
///
/// If `url` is provided, this method will wrap the resulting error in a `CocoaError`, if applicable.
/// - Parameters:
///     - code: A POSIX error code. Defaults to the POSIX global `errno` variable.
///     - path: An optional file path to associate with the error, if applicable.
///     - isWrite: Optional. Set to `true` if the error is known to have been generated by a write operation.
///         This parameter is ignored unless `url` is provided.
/// - Returns: An `Error` wrapping the POSIX error code.
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func errno(_ code: Int32? = nil, path: FilePath, isWrite: Bool = false) -> any Error {
    let code = code ?? getErrno()

#if Foundation
    return translateErrno(code, path: path, isWrite: isWrite)
#else
    if code == 0 {
        return GenericError.unknownError(isWrite: isWrite)
    }

    return System.Errno(rawValue: code)
#endif
}

/// Create an `Error` corresponding to a POSIX error code.
///
/// If `url` is provided, this method will wrap the resulting error in a `CocoaError`, if applicable.
/// - Parameters:
///     - code: A POSIX error code. Defaults to the POSIX global `errno` variable.
///     - path: An optional file path to associate with the error, if applicable.
///     - isWrite: Optional. Set to `true` if the error is known to have been generated by a write operation.
///         This parameter is ignored unless `url` is provided.
/// - Returns: An `Error` wrapping the POSIX error code.
public func errno(_ code: Int32? = nil, path: String? = nil, isWrite: Bool = false) -> any Error {
    let code = code ?? getErrno()

#if Foundation
    return translateErrno(code, path: path, isWrite: isWrite)
#else
    if code == 0 {
        return GenericError.unknownError(isWrite: isWrite)
    }

    guard #available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *), versionCheck(11) else {
        return GenericError(_domain: "NSPOSIXErrorDomain", _code: Int(code))
    }

    return System.Errno(rawValue: code)
#endif
}

public enum POSIXReturnExpectation<I: BinaryInteger> {
    case zero
    case nonNegative
    case specific(I)
    case notSpecific(I)
}

public enum POSIXErrorReturn {
    case globalErrno
    case returnValue
}

#if Foundation

public func callPOSIXFunction<I: BinaryInteger>(
    expect expectedReturn: POSIXReturnExpectation<I>,
    errorFrom errorReturn: POSIXErrorReturn = .globalErrno,
    url: URL,
    isWrite: Bool = false,
    closure: () -> I
) throws {
    let (err, isError) = _callPOSIXFunction(expect: expectedReturn, errorFrom: errorReturn, closure: closure)
    if isError {
        throw errno(Int32(err), url: url, isWrite: isWrite)
    }
}

public func callPOSIXFunction<T, I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn = .globalErrno,
    url: URL,
    isWrite: Bool = false,
    closure: (UnsafeMutablePointer<T>) -> I
) throws -> T {
    try callPOSIXFunction(expect: expect, errorFrom: errorFrom, path: url.path, isWrite: isWrite, closure: closure)
}

public func callPOSIXFunction<T>(url: URL, closure: () -> UnsafeMutablePointer<T>?) throws -> UnsafeMutablePointer<T> {
    try callPOSIXFunction(path: url.path, closure: closure)
}

public func callPOSIXFunction(url: URL, closure: () -> UnsafeMutableRawPointer?) throws -> UnsafeMutableRawPointer {
    try callPOSIXFunction(path: url.path, closure: closure)
}

public func callPOSIXFunction(url: URL, closure: () -> OpaquePointer?) throws -> OpaquePointer {
    try callPOSIXFunction(path: url.path, closure: closure)
}

#endif

@discardableResult
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func callPOSIXFunction<I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn = .globalErrno,
    path: FilePath,
    isWrite: Bool = false,
    closure: () -> I
) throws -> I {
    let (ret, isError) = _callPOSIXFunction(expect: expect, errorFrom: errorFrom, closure: closure)

    if isError {
        throw errno(Int32(ret), path: path, isWrite: isWrite)
    }

    return ret
}

@discardableResult
public func callPOSIXFunction<I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn = .globalErrno,
    path: String? = nil,
    isWrite: Bool = false,
    closure: () -> I
) throws -> I {
    let (ret, isError) = _callPOSIXFunction(expect: expect, errorFrom: errorFrom, closure: closure)

    if isError {
        throw errno(Int32(ret), path: path, isWrite: isWrite)
    }

    return ret
}

@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func callPOSIXFunction<T, I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn = .globalErrno,
    path: FilePath,
    isWrite: Bool = false,
    closure: (UnsafeMutablePointer<T>) -> I
) throws -> T {
    switch _callPOSIXFunction(expect: expect, errorFrom: errorFrom, closure: closure) {
    case .success(let returnValue):
        return returnValue
    case .failure(let err):
        throw errno(err, path: path, isWrite: isWrite)
    }
}

public func callPOSIXFunction<T, I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn = .globalErrno,
    path: String? = nil,
    isWrite: Bool = false,
    closure: (UnsafeMutablePointer<T>) -> I
) throws -> T {
    switch _callPOSIXFunction(expect: expect, errorFrom: errorFrom, closure: closure) {
    case .success(let returnValue):
        return returnValue
    case .failure(let err):
        throw errno(err, path: path, isWrite: isWrite)
    }
}

@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func callPOSIXFunction<T>(
    path: FilePath,
    isWrite: Bool = false,
    closure: () -> UnsafeMutablePointer<T>?
) throws -> UnsafeMutablePointer<T> {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

public func callPOSIXFunction<T>(
    path: String? = nil,
    isWrite: Bool = false,
    closure: () -> UnsafeMutablePointer<T>?
) throws -> UnsafeMutablePointer<T> {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func callPOSIXFunction(
    path: FilePath,
    isWrite: Bool = false,
    closure: () -> UnsafeMutableRawPointer?
) throws -> UnsafeMutableRawPointer {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

public func callPOSIXFunction(
    path: String? = nil,
    isWrite: Bool = false,
    closure: () -> UnsafeMutableRawPointer?
) throws -> UnsafeMutableRawPointer {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
public func callPOSIXFunction(path: FilePath, isWrite: Bool = false, closure: () -> OpaquePointer?) throws -> OpaquePointer {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

public func callPOSIXFunction(
    path: String? = nil,
    isWrite: Bool = false,
    closure: () -> OpaquePointer?
) throws -> OpaquePointer {
    guard let pointer = closure() else { throw errno(path: path, isWrite: isWrite) }
    return pointer
}

internal func _callPOSIXFunction<I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn,
    closure: () -> I
) -> (I, Bool) {
    let returnValue = closure()
    let globalErrno = getErrno()
    let success: Bool

    switch expect {
    case .zero:
        success = returnValue == 0
    case .nonNegative:
        success = returnValue >= 0
    case .specific(let specificValue):
        success = returnValue == specificValue
    case .notSpecific(let specificValue):
        success = returnValue != specificValue
    }

    if !success {
        switch errorFrom {
        case .globalErrno:
            return (I(globalErrno), true)
        case .returnValue:
            return (returnValue, true)
        }
    }

    return (returnValue, false)
}

private enum PointerReturn<T> {
    case success(T)
    case failure(Int32)
}
private func _callPOSIXFunction<T, I: BinaryInteger>(
    expect: POSIXReturnExpectation<I>,
    errorFrom: POSIXErrorReturn,
    closure: (UnsafeMutablePointer<T>) -> I
) -> PointerReturn<T> {
    let returnPointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
    defer { returnPointer.deallocate() }

    let ptrClosure = { closure(returnPointer) }

    let (err, isError) = _callPOSIXFunction(expect: expect, errorFrom: errorFrom, closure: ptrClosure)

    if isError {
        return .failure(Int32(err))
    }

    return .success(returnPointer.pointee)
}

#if Foundation

@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, macCatalyst 14.0, *)
internal func translateErrno(_ code: Int32, path: FilePath, isWrite: Bool) -> any Error {
    guard #available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *), versionCheck(12) else {
        return translateErrno(code, path: String(decoding: path), isWrite: isWrite)
    }

    guard #available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, macCatalyst 16.1, *), versionCheck(13) else {
        return translateErrno(code, path: path.string, isWrite: isWrite)
    }

    return errno(code, url: URL(filePath: path), isWrite: isWrite)
}

internal func translateErrno(_ code: Int32, path: String?, isWrite: Bool) -> any Error {
    let url: URL?

    if #available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, macCatalyst 16.0, *), versionCheck(13) {
        url = path.flatMap { URL(filePath: $0) }
    } else {
        url = path.map { URL(fileURLWithPath: $0) }
    }

    return errno(code, url: url, isWrite: isWrite)
}

#endif
